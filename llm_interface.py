# Handles LLM interaction using function calling

import openai
import json
from utils.auth import load_config

def generate_broadcast(game_data, user_preferences):
    config = load_config()
    openai.api_key = config["api_keys"]["openai"]

    def create_broadcast(game_info, preferences):
        broadcast_text = f"Broadcast for {game_info['GameKey']}:\n"
        broadcast_text += f"Players of Interest: {', '.join(preferences['players'])}\n"
        broadcast_text += f"Tone: {preferences['tone']}\n"
        broadcast_text += "Game Highlights: ... (generated by LLM)"
        return broadcast_text

    function = {
        "name": "create_broadcast",
        "description": "Generates a customized broadcast for a game.",
        "parameters": {
            "type": "object",
            "properties": {
                "game_info": {
                    "type": "object",
                    "properties": {
                        "GameKey": {"type": "string"},
                        "game_data": {"type": "string"},
                    },
                    "required": ["GameKey", "game_data"],
                },
                "preferences": {
                    "type": "object",
                    "properties": {
                        "players": {
                            "type": "array",
                            "items": {"type": "string"},
                        },
                        "tone": {"type": "string"},
                    },
                    "required": ["players", "tone"],
                },
            },
            "required": ["game_info", "preferences"],
        },
    }

    messages = [
        {
            "role": "user",
            "content": "Generate a customized broadcast for the user based on the game data and preferences.",
        }
    ]

    response = openai.ChatCompletion.create(
        model="gpt-3.5-turbo-0613",
        messages=messages,
        functions=[function],
        function_call={"name": "create_broadcast"},
    )

    message = response["choices"][0]["message"]

    if message.get("function_call"):
        function_args = json.loads(message["function_call"]["arguments"])
        broadcast_text = create_broadcast(
            function_args["game_info"],
            function_args["preferences"],
        )
        return broadcast_text
    else:
        return message["content"]
