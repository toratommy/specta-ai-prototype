# Handles LLM interaction using function calling

import openai
import json
import streamlit as st

def generate_broadcast(game_data, user_preferences):
    """
    Generates a customized broadcast for the selected game and user preferences 
    using OpenAI's function calling feature.
    
    Parameters:
        game_data (dict): Information about the selected game.
        user_preferences (dict): User preferences, including players of interest and tone.
        
    Returns:
        str: Customized broadcast text generated by the LLM.
    """
    # Retrieve OpenAI API key from Streamlit secrets
    openai.api_key = st.secrets["api_keys"]["openai"]

    # Define the function schema for the LLM
    def create_broadcast(game_info, preferences):
        """
        Function to format the broadcast text based on game data and user preferences.
        """
        broadcast_text = f"Broadcast for {game_info['GameKey']}:\n"
        broadcast_text += f"Players of Interest: {', '.join(preferences['players'])}\n"
        broadcast_text += f"Tone: {preferences['tone']}\n"
        broadcast_text += "Game Highlights: ... (generated by LLM)"
        return broadcast_text

    function = {
        "name": "create_broadcast",
        "description": "Generates a customized broadcast for a game.",
        "parameters": {
            "type": "object",
            "properties": {
                "game_info": {
                    "type": "object",
                    "properties": {
                        "GameKey": {"type": "string"},
                        "game_data": {"type": "string"},
                    },
                    "required": ["GameKey", "game_data"],
                },
                "preferences": {
                    "type": "object",
                    "properties": {
                        "players": {
                            "type": "array",
                            "items": {"type": "string"},
                        },
                        "tone": {"type": "string"},
                    },
                    "required": ["players", "tone"],
                },
            },
            "required": ["game_info", "preferences"],
        },
    }

    # Prepare inputs for function calling
    llm_input = {
        "game_info": {
            "GameKey": game_data.get("GameKey", "Unknown Game"),
            "game_data": json.dumps(game_data),
        },
        "preferences": user_preferences,
    }

    # Send a function-calling request to OpenAI's API
    response = openai.ChatCompletion.create(
        model="gpt-3.5-turbo-0613",  # Ensure function calling is supported by the model
        messages=[
            {
                "role": "user",
                "content": "Generate a customized broadcast for the user based on the game data and preferences.",
            }
        ],
        functions=[function],
        function_call={"name": "create_broadcast"},
    )

    # Process the response
    message = response["choices"][0]["message"]

    if message.get("function_call"):
        # Extract arguments provided by the LLM for the function
        function_args = json.loads(message["function_call"]["arguments"])
        return create_broadcast(function_args["game_info"], function_args["preferences"])
    else:
        # Handle cases where the LLM doesn't call the function
        return message["content"]
